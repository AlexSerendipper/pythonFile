""" Python变量
【python变量】用于在内存中保存数据。使用变量名来访问这块区域的数据
 ✔ python中不需要指定变量类型，类似于matlab，根据所赋的值决定其类型，但其确实是有类型。即弱类型
 变量命名中推荐使用snake_case风格(分隔符_)，而不同于java使用小驼峰
 值得注意的是，python中没有char类型，单个字符也是字符串

【python变量分类1】可变 不可变
 不同与java，将数据类型分为：基础数据类型、以及引用数据类型（包装类、数组、String、集合）
   在python中，int、float、double、String、列表、字典、元组均为引用数据类型，即底层均存储的是地址值
 int、float、double、String、元组属于不可变数据类型，即底层指向的数据不可变。如果你尝试改变数据，‌实际上是创建了一个新的整型对象。‌
  列表、字典、集合 属于可变数据类型，即底层指向的数据可变，如果尝试改变数据 并不会改变 指向列表、字典、集合的地址值

【python变量分类2变量】全局 局部
1) python中与java类似，声明在函数内部的变量为局部变量，声明在函数外部的为全局变量
  (Java中每个变量必须先声明，后使用。并且其变量的作用域是定义在一对{ }内)
2) 由于python的弱类型特性
   当局部变量与全局变量同名时，如未特殊说明，不知道操作的是全局变量还是局部变量。。所以会报错
   注意：无法同时在局部域中使用同名的局部变量和全局变量
3) ✔✔ 若不存在同名的情况，在内层域中可以使用外层域的变量
   即内层1可以使用外层的全局变量，内层2可以使用内层1的局部变量，最终到内置变量中搜索
--------------
name = 'zzj'
def func():
    name = '666'           # 报错，因为此处不知道是想创建新的局部变量，还是想对全局变量进行修改，出现冲突
    print(name)            # 局部域中无法更改全局域的变量，如果要修改。需要提前声明。
                           # 声明方式未在函数声明后，使用global 变量名。。这种方式对全局变量进行修改
--------------
4) 列表、字典、集合不需要global声明
   因为这几个属于可变数据类型，声明在函数内部也不会产生歧义
   所以在局部域中仍能修改全局域的列表、字典和集合

【变量类型转换】
str()/int()/bin()     // 强制类型转换
list()/dict()/set()/tuple()


【运算符】无特殊说明，则与java相同
1、数值运算符
   //            # ✔ 除后取整运算，在java中，int类型使用除法就是默认的取整运算
   **            # ✔ 乘方运算，相当于java中的a^b
   %             # 取余运算
2、关系运算符
   ><==          # 比较运算符结果都为boolean
   ==            # java中，基础数据类型比较的是值，引用数据类型比较的就是地址值（包括类）
                  # python中，由于弱类型特性，所有变量类型均为引用型。因此==比较的是都是字面量（String、基础数据类型都是）
   is            # 使用is可以比较所有变量类型的地址值
3、逻辑运算符
   and or not    # ✔ 相比于java中使用符号表示与或非 & | !，python中更常用这种方式来表示
4、位运算符：同样的，符号左右操作的都是基础数据类型，则为位运算符，特点是高效
   ~             # python中的取反运算是~而非！
5、三元运算符
   result = '真 ' if (8 > 2) else '假'       # 不同与java中的表达 result=(8>2)?'真':'假'
"""

person = "zzj"
address = "xxx"
num = 5
n = 18.55
# 1. 逻辑比较
print(person == 'zzj')  # 如果是java比较的就是地址值了，因为string属于引用数据类型
print(not (2 > 1) or (1 > 2))
print((2 > 1) | (1 > 2))
print(2 << 2)  # 位运算符
print(num is n)

# 2. 三元运算符
result = '真 ' if (8 > 2) else '假'
print(result)


