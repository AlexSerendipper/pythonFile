""" 程序流程控制
【一、顺序结构】程序从上到下逐行地执行，中间没有任何判断和跳转

【二、分支结构】根据条件，选择性地执行某段代码
    1）分支结构1。多用于判断条件是一个范围的情况✔当多个条件是“包含”关系时，请遵循“上小下大"原则✔
        如果判断条件为 0 '' none时，相当于为false
        ✔✔✔ 分支 也常使用如下判断条件
                   'str1' in str2，判断字符串str1是否包含于str2中
                   'str2' in list，判断列表中是否包含了str2
        python中没有switch的分支结构
       if 条件1:
           条件成立执行的语句（一个tab或四个空格的缩进）
       elif 条件2:
           条件成立执行的语句（一个tab或四个空格的缩进）
       else:
           条件不成立执行的语句

【三、循环结构】根据循环条件，重复性的执行某段代码。
     ✔✔✔ 集合常使用in range，range(x)产生左闭右开的区间[0,x)，range(a,b)则为[a,b)，range(a,b,step)可以指定步长
     ✔✔✔ 集合也常使用如下判断条件
                   变量 in str，代表遍历字符串中的每一个字符
                   变量 not in str2，可用于判断当前字符是否在str2中从而决定是否进入循环
                   变量 in range(len(str3))，代表遍历单词的长度
                   变量 in list，代表遍历列表中的每一个元素
    1）循环结构1:for循环 (类似matlab)
        
        for 变量名 in 集合:
            语句
        else:
            语句 (✔ 当for循环结束执行，或者没有循环数据时执行(range(0)))
    2）循环结构2：while循环 (类似java)
        初始化变量定义在循环外
        多用于判断条件比较复杂的情况✔
        while(true)建立一个无限循环
       
         定义初始化变量
         while (条件表达式) {
            // 操作表达式
            // 循环体代码
         }

【常用关键字】
1）break
 break语句用于终止某个语句块的执行
 break语句出现在多层嵌套的语句块中时，默认退出最近一层循环
 ✔✔ 当break退出循环时，for循环中的else语句不会被执行
2）pass
 缩进处内容不确定时，为了保证语法的正确性，可以使用pass占位
3）continue()
 continue只能使用在循环结构中
 continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环
 continue语句出现在多层嵌套的语句块中时，默认退出最近一层循环的当此循环
 continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环
4)return
 它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束
 return直接结束整个方法，不管这个return处于多少层循环之内
"""

# 循环实例
for i in range(1, 20, 5):
    print(i)
else:
    print(666)

if 'goods' in ['goods', 'alex']:
    print('thank you')
