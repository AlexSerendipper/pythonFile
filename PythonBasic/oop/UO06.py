"""
【可迭代对象】
 生成器、元组、列表、集合、字典、字符串
 isinstance(list1.Iterable)             # 判断对象是否是可迭代的

【迭代器】与java中集合的迭代器几乎一样
 迭代器从可迭代对象的第一个元素开始访问，直到所有的的元素访问结束，迭代器只能往前不会后退
 生成器本身即是迭代器，其他对象需要转为迭代器
 迭代器 = iter(可迭代对象)               # 得到迭代器

【生成器与迭代器的区别】
1）生成器在每次产生一个值后会自动保存当前的状态，下次调用时会从上次离开的地方继续执行。
   而迭代器则不会自动保存状态，它依赖于用户显式地请求下一个值。
2）生成器在迭代过程中只会生成当前需要的值，而不是一次性生成所有的值，所以它可以处理大数据集，而不会耗尽内存。
  迭代器则可能需要一次性生成所有的值。
3）迭代器可以被多次迭代，每次迭代都会从头开始。
   而生成器只能被迭代一次，因为它不保存整个序列，只保存当前的状态。
4）生成器更加灵活，可以使用任何种类的控制流语句（如if、while等）。而迭代器则需要在__next__()方法中实现所有的控制流逻辑。
总结来说，生成器是一种特殊的迭代器，



"""