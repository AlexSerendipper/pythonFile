""" 项目>>包>>模块>>类
【模块】
 在python中，模块是代码组织的一种方式，能够把功能相近的函数放到同一个文件中，一个.py文件就是一个模块module
 模块可以大幅提高代码的复用性，并且解决了命名冲突问题（不同的模块中，可以有同名的函数

【包】包名必须符合命名规则，一个包中可以存放多个模块
  新建Directory                            # 这是新建文件夹，主要用于存放非py文件
  新建Python package                       # python包，用于存放py文件的集合（包中的__init__文件指明了当前文件夹是包
                                              当导入某包时，默认会先调用该包下的__init__文件

【方式一：import导入】
 import 模块名                            # 方式一：用于导入模块！！导入模块中元素见方式二，导入包见方式三
                                             自定义模块以及系统自带模块都支持导入
                                             ✔✔✔ 导入自定义 模块 的初始路径是从当前项目中(import 项目.包.模块)
                                             调用时，也是用  项目.包.模块.方法 进行调用
 注意导入模块的时候，会把模块中所有的内容导入到内存中，所以如果有print()之类的操作，都会被执行
   ✔✔✔ 如果不想输出print()之类的操作，可以把这部分操作写到 if __name__ == '__main__': 当中
   这是因为当模块被直接运行时，‌__name__属性的值会被设置为'__main__'，‌而当模块被导入时，‌__name__的值则是被导入模块的名字。‌
   因此，‌通过检查__name__的值，‌可以确定模块是作为脚本独立运行还是被其他脚本导入作为模块使用。‌


【方式二：from..import..导入】导入包以及导入包中所有模块见下方__init__
 from 包名 import 模块名                             # 方式二：该方式即可用于导入 模块(类)！！！
  from 包名.包名.模块名 import 变量1/函数1/类1/*        # 也可用于导入模块中元素（*号代表全部导入）
 from 包名 import 模块名 as 模块名1                   # 可对模块起别名，防止不同包下模块重名问题（因为最终都是通过  模块名.函数名  的方式调用，所以重名会有问题）
 from .模块名 import *                                  .表示从当前文件所在文件夹开始查找。。。相对路径的默认路径为当前文件所在文件夹下。。。相对导入通常适用于包内部的模块之间的导入。
                                                         可以使用绝对路径导入，默认路径为从项目的根目录开始
 from ./包/模块名 import 函数名1                         ..表示从当前文件夹的上级目录查找。。。注意没有斜杠
 函数1()                                            # 当导入函数层级时，可以无需使用 模块名.函数 的方式，便可直接进行函数1的调用


【方式三：导入包】__init__文件配置
 实际上方式一和方式二均可导入包，只不过如果没有进行__init__文件配置，并不会默认导入包中所有文件，需要指定向外暴露的模块
 导入某包时，该包下__init__文件中的所有内容都会被加载，利用该特性：
  1）包下的公共方法可以写在该文件中
  2）我们可以实现包中模块的导入
 值得注意的是，当我们试图 导入包以及导入包中所有模块时，这种情况我们必须在__init__文件中指定向外暴露的模块！！否则导入后所有模块都无法使用！！
-------------------------
      from 包名2 import *                      # 导入包2下的所有模块（也可以导入到函数层级，便可以直接使用函数名进行函数的调用）
       __all__=[函数1,函数2]                    # 当使用*号导入时，在__init__文件首行必须设置__all__，即指定向外暴露的模块
      from 包名2 import 模块名                 # 指定具体向外暴露的模块，这种情况不需要写__all__
     包名.模块名.函数名()/包名.模块名.变量名     # 导入包后，进行模块的调用
----------------------------

【循环导入问题】！！！！
 在Python中，在两个或多个模块互相导入对方的情况下，会导致其中一个模块不完全加载。
  如  from module_b import func_b  和  from module_a import func_a
 解决方式，可以调整导入的位置（将导入的位置放到函数中，或者放到最后）！

"""
from PythonBasic import abnormal
abnormal.init()
# abnormal.UA01.excep()


from PythonSenior import commonclass
print(commonclass.UC03)
print(__name__)

