""" 项目>>包>>模块>>类
【模块】
 在python中，模块是代码组织的一种方式，能够把功能相近的函数放到同一个文件中，一个.py文件就是一个模块module
 模块可以大幅提高代码的复用性，并且解决了命名冲突问题（不同的模块中，可以有同名的函数

【包】包名必须符合命名规则，一个包中可以存放多个模块
  新建Directory                            # 这是新建文件夹，主要用于存放非py文件
  新建Python package                       # python包，用于存放py文件的集合（包中的__init__文件指明了当前文件夹是包
                                              当导入某包时，默认会先调用该包下的__init__文件

【import导入】
 import 模块名                            # 方式一：该方式只能用于导入模块！！！！！！
                                             自定义模块以及系统自带模块都支持导入
                                             ✔✔✔ 导入自定义 模块 的初始路径是从当前项目中(import 项目.包.模块)
                                             调用时，也是用  项目.包.模块.方法 进行调用
 注意导入模块的时候，会把模块中所有的内容导入到内存中，所以如果有print()之类的操作，都会被执行
✔✔✔ 如果不想输出print()之类的操作，可以把这部分操作写到 if __name__ == '__main__': 当中
这是因为当模块被直接运行时，‌__name__属性的值会被设置为'__main__'，‌而当模块被导入时，‌__name__的值则是被导入模块的名字。‌
因此，‌通过检查__name__的值，‌可以确定模块是作为脚本独立运行还是被其他脚本导入作为模块使用。‌

 from 包名.包名.模块名 import 变量1/函数1/类1/*        # 方式二：该方式可用于导入 模块/类！！！！！。导入模块中的所有元素，可以使用*号代表全部导入
  from 包名 import 模块名                                同理，默认路径为当前文件所在文件夹下。【导入包以及导入包中所有模块见下方__init__】
  from .模块名 import *                                  .表示从当前文件所在文件夹开始查找
  from ..模块名 import *                                 ..表示从当前文件夹的上级目录查找
  __all__=[函数1,函数2]                    # 当使用*号导入时，在被导入模块首行设置该列表，可以限制 * 取到的内容（仅能取到函数1和函数2
 函数1()                                   # 当导入函数层级时，可以无需使用 模块名.函数 的方式，便可直接进行函数1的调用


【__init__文件】
 到导入某包时，该包下__init__文件中的所有内容都会被加载，并直接使用   包名.函数名()/包名.变量名   的方式进行调用
  因此，该包下的公共方法可以写在该文件中
 值得注意的是，当我们试图 导入包以及导入包中所有模块时，这种情况我们必须在__init__文件中指定向外暴露的模块！！否则导入后所有模块都无法使用（和从模块中导入所有方法刚号相反，不指定则全部导入）！！
 from 包名1 import 包名1                              # 导入整个包
 from 包名2 import *                                  # 导入包下的所有模块

【循环导入问题】
 在Python中，在两个或多个模块互相导入对方的情况下，会导致其中一个模块不完全加载。
  如  from module_b import func_b  和  from module_a import func_a
 解决方式，可以调整导入的位置（将导入的位置放到函数中，或者放到最后）！

"""
from PythonBasic import abnormal
# abnormal.init()
abnormal.UA01()


# from PythonBasic.abnormal.UA01 import excep
# excep()

if __name__ == '__main__':
    print(__name__)

